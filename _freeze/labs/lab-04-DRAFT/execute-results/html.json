{
  "hash": "6e135f95c2b6d07624fd80be70cc7f68",
  "result": {
    "markdown": "---\ntitle: \"Lab 04: The Office\"\nsubtitle: \"Feature engineering\"\nexecute:\n  freeze: auto\n  echo: true\n  eval: false\n  warning: false\n  message: false\n---\n\n\n::: callout-important\nDue:\n\n-   Wednesday, October 12 , 11:59pm (Thursday labs)\n-   Thursday, October 13, 11:59pm (Friday labs)\n:::\n\n## Introduction\n\nIn today's lab you will analyze data from the [schrute](https://bradlindblad.github.io/schrute/) package to predict IMDB scores for episodes of The Office.\n\nThis is a different data source than the one we've used in class last week.\n\n### Learning goals\n\nBy the end of the lab you will...\n\n-   engineer features based on episode scripts\n-   train a model\n-   interpret model coefficients\n-   make predictions\n-   evaluate model performance on training and testing data\n-   Practice collaborating with others using a single Github repo.\n\n## Getting started\n\n-   A repository has already been created for you and your teammates. Everyone in your team has access to the same repo.\n-   Go to the [sta210-fa22](https://www.github.com/sta210-fa22) organization on GitHub. Click on the repo with the prefix **lab-04**. It contains the starter documents you need to complete the lab.\n-   Each person on the team should clone the repository and open a new project in RStudio. Throughout the lab, each person should get a chance to make commits and push to the repo.\n-   **Do not make any changes to the `.qmd` file until the instructions tell you do to so.**\n\n## Workflow: Using Git and GitHub as a team\n\n::: callout-important\nAssign each person on your team a number 1 through 4. For teams of three, Team Member 1 can take on the role of Team Member 4.\n\nThe following exercises must be done in order. **Only one person should type in the `.qmd` file, commit, and push updates at a time.** When it is not your turn to type, you should still share ideas and contribute to the team's discussion.\n:::\n\n::: {.callout-important appearance=\"simple\"}\n‚å®Ô∏è **Team Member 1: Hands on the keyboard.**\n\nüôÖüèΩ All other team members: Hands off the keyboard until otherwise instructed![^1]\n:::\n\n[^1]: Don't trust yourself to keep your hands off the keyboard? Put them in your picket or cross your arms. No matter how silly it might feel, resist the urge to touch your keyboard until otherwise instructed!\n\nChange the author to your team name and include each team member's name in the `author` field of the YAML in the following format: `Team Name: Member 1, Member 2, Member 3, Member 4`.\n\n::: render-commit-push\n**Team Member 1:** Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the `.qmd` and PDF documents, and finally push the changes to GitHub.\n:::\n\n::: pull\n**Team Members 2, 3, 4:** Once Team Member 1 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team's lab repo. Then, in RStudio, click the **Pull** button in the Git pane to get the updated document. You should see the updated name in your `.qmd` file.\n:::\n\n## Packages\n\nThe following packages are used in the lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(schrute)\nlibrary(lubridate)\nlibrary(knitr)\n```\n:::\n\n\n## Data: The Office\n\nThe dataset for this lab comes from the [schrute](https://bradlindblad.github.io/schrute/) package and it's called `theoffice`. This dataset contains the entire script transcriptions from The Office.\n\nLet's start by taking a peek at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(theoffice)\n```\n:::\n\n\nThere are 55130 observations and 12 columns in this dataset. The variable names are as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(theoffice)\n```\n:::\n\n\nEach row in the dataset is a line spoken by a character in a given episode of the show. This means some information at the episode level (e.g., `imdb_rating`, `air_date`, etc. are repeated across the rows that belong to a single episode.\n\nThe `air_date` variable is coded as a factor, which is undesirable. We'll want to parse that variable later into its components during feature engineering. So, for now, let's convert it to date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoffice <- theoffice |>\n  mutate(air_date = ymd(as.character(air_date)))\n```\n:::\n\n\nLet's take a look at the data to confirm we're happy with how each of the variables are encoded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(theoffice)\n```\n:::\n\n\n## Exercises\n\n### Data prep\n\n#### Exercise 1\n\nIdentify episodes that touch on Halloween, Valentine's Day, and Christmas.\n\n-   First, convert all `text` to lowercase with `str_to_lower()`.\n-   Then, create three new variables (`halloween_mention`, `valentine_mention`, and `christmas_mention`) where that take on the value `1` if the character string `\"halloween\"`, `\"valentine\"`, or `\"christmas\"` appears in the text, respectively, and `0` otherwise.\n\nSome code is provided below to help you get started.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoffice <- theoffice |>\n  mutate(\n    text = ___(text),\n    halloween_mention = if_else(str_detect(text, \"___\"), ___, ___),\n    valentine_mention = ___,\n    ___ = ___\n  )\n```\n:::\n\n\n#### Exercise 2\n\nIn this exercise we'll accomplish two separate tasks. And there's a good reason why we're doing it all at once; we're going to drastically change our data frame, from one row per line spoken to one row per episode. We'll call the resulting data frame `office_episodes`.\n\nThe two tasks are as follows:\n\n-   Task 1. Identify episodes where the word \"halloween\", \"valentine\", or \"christmas\" were ever mentioned, using variables you created above.\n-   Task 2. Calculate the percentage of lines spoken by Jim, Pam, Michael, and Dwight for each episode of The Office.\n\nBelow are some instructions and starter code to get you started with these tasks.\n\n-   Start by grouping `theoffice` data by `season`, `episode`, `episode_name`, `imdb_rating`, `total_votes`, and `air_date`. (These variables, except for `season` have the same value for each given episode, hence grouping by them allows us to make sure they appear in the output of this pipeline.)\n-   Use `summarize()` to calculate the desired features at the season-episode level.\n-   Task 1:\n    -   Calculate the number of lines per season per episode, you might name this new variable `n_lines`.\n    -   Then, calculate the proportion of lines in that episode spoken by each of the four `character`s Jim, Pam, Michael, and Dwight. Name these new variables `lines_jim`, `lines_pam`, `lines_michael`, and `lines_dwight`, respectively.\n-   Task 2:\n    -   Create a variable called `halloween` that sums up the `1`s in `halloween_mention` at the season-episode level and takes on the value `\"yes\"` if the sum is greater than or equal to 1, or `\"no\"` otherwise.\n    -   Do something similar for new variables `valentine` and `christmas` as well based on values from `valentine_mention` and `christmas_mention`.\n-   Finish up your `summarize()` statement by dropping the groups, so the resulting data frame is no longer grouped and remove `n_lines` (we won't use that variable in our analysis, we only calculated it as an intermediary step).\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_episodes <- theoffice |>\n  group_by(___) |>\n  summarize(\n    n_lines = n(),\n    lines_jim = sum(character == \"___\") / n_lines,\n    lines_pam = ___,\n    lines_michael = ___,\n    lines_dwight = ___,\n    halloween = if_else(sum(___) >= 1, \"yes\", \"no\"),\n    valentine = if_else(___, \"___\", \"___\"),\n    christmas = if_else(___, \"___\", \"___\"),\n    .groups = \"drop\"\n  ) |>\n  select(-n_lines)\n```\n:::\n\n\n::: callout-note\nWhy `summarize()` and not `mutate()`? We use `mutate()` to add / modify a column of a data frame. The output data frame always has the same number of rows as the input data frame. On the other hand, we use `summarize()` to reduce the data frame to either a single row (single summary statistic) or one row per each group (summary statistics at the group level).\n\nAnd what about that `.groups` argument in summarize? Try running your `summarize()` step without it first. You'll see that R print out a message saying *\"`summarize()` has grouped output by `season`, `episode`. You can override using the `.groups` argument.\"* `summarize()` will only drop the last group. So if you want a data frame that doesn't have a grouping structure as a result of a `summaerize()`, you can explicitly ask for that with `.groups = \"drop\"`. Before you proceed, read the [documentation for `summarize()`](https://dplyr.tidyverse.org/reference/summarise.html), and specifically the explanation for the `.groups` argument to prepare yourself for future instances where you might see this type of message.\n:::\n\n#### Exercise 3\n\nThe Michael Scott character (played by Steve Carrell) left the show at the end of Season 7. Add an indicator variable, `michael`, that takes on the value `\"yes\"` if Michael Scott (Steve Carrell) was in the show, and `\"no\"` if not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_episodes <- office_episodes |>\n  mutate(michael = if_else(season > ___, \"___\", \"___\"))\n```\n:::\n\n\n#### Exercise 4\n\nPrint out the dimensions (`dim()`) of the new dataset you created as well as the `names()` of the columns in the dataset.\n\nYour new dataset, `office_episodes,` should have 186 rows and 14 columns. The column names should be `season`, `episode`, `episode_name`, `imdb_rating`, `total_votes`, `air_date`, `lines_jim`, `lines_pam`, `lines_michael`, `lines_dwight`, `halloween`, `valentine`, `christmas`, and `michael`. If you are not matching these numbers or columns, go back and try to figure out where you went wrong. Or ask your TA for help!\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.\n\nIt's also a good place to let another team member take over the keyboard! A team member who hasn't done so yet should pull the changes and make the commits for the next few exercises.\n:::\n\n### Exploratory data analysis\n\nThis would be a good place to conduct some exploratory data analysis (EDA). For example, plot the proportion of lines spoken by each character over time. Or calculate the percentage of episodes that mention Halloween, or Valentine's Day, or Christmas. Given we have limited time in the lab we're not going to ask you to report EDA results as part of this lab, but we're noting this here to provide suggestions for how you might go about structuring your project.\n\n### Modeling prep\n\n#### Exercise 5\n\nSplit the data into training (75%) and testing (25%). Save the training and testing data as `office_train` and `office_test` respectively.\n\n*Naming suggestion:* Call the initial split `office_split`, the training data `office_train`, and testing data `office_test`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\noffice_split <- ___(office_episodes)\noffice_train <- ___(office_split)\noffice_test <- ___(___)\n```\n:::\n\n\n#### Exercise 6\n\nSpecify a linear regression model with engine `\"lm\"` and call it `office_spec`.\n\n*Naming suggestion:* Call the model specification `office_spec`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_spec <- ___\n```\n:::\n\n\n#### Exercise 7\n\nCreate a recipe that performs feature engineering using the following steps (in the given order):\n\n-   `update_role()`: updates the role of `episode_name` to not be a predictor (be an ID)\n-   `step_rm()`: removes `air_date` as a predictor\n-   `step_dummy()`: creates dummy variables for `all_nominal_predictors()`\n-   `step_zv()`: removes all zero variance predictors\n\n*Naming suggestion:* Call the recipe `office_rec`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_rec <- recipe(imdb_rating ~ ., data = office_train) |>\n  ___\n```\n:::\n\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.\n\nIt's also a good place to let another team member take over the keyboard! A team member who hasn't done so yet should pull the changes and make the commits for the next few exercises.\n:::\n\n#### Exercise 8\n\nBuild a model workflow for fitting the model specified earlier and using the recipe you developed to preprocess the data.\n\n*Naming suggestion:* Call the model workflow `office_wflow`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_wflow <- workflow() |>\n  add_model(___) |>\n  add_recipe(___)\n```\n:::\n\n\n### Model fit and evaluation\n\n#### Exercise 9\n\nFit the model to training data, neatly display the model output, and interpret two of the slope coefficients.\n\n*Naming suggestion:* Call the model fit `office_fit`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_fit <- office_wflow |>\n  fit(data = ___)\n\n___\n```\n:::\n\n\n#### Exercise 10\n\nCalculate predicted `imdb_rating` for the training data using the `predict()` function. Then, bind two columns from the training data to this result: `imdb_rating` and `episode_name`. The resulting data frame should have three columns: `.pred`, `imdb_rating`, and `episode_name`. Then, using this data frame, create a scatterplot of predicted and observed IMDB ratings for the training data.\n\n*Naming suggestion:* Call the resulting data frame `office_train_pred`.\n\n*Stretch goal.* Add episode names, using `geom_text()`, for episodes with much higher and much lower observed IMDB ratings compared to others.\n\n#### Exercise 11\n\nCalculate the R-squared and RMSE for this model for predictions on the training data.\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.\n\nIt's also a good place to let another team member take over the keyboard! A team member who hasn't done so yet should pull the changes and make the commits for the next few exercises.\n:::\n\n#### Exercise 12\n\nRepeat Exercise 10, but with testing data.\n\n*Naming suggestion:* Call the resulting data frame `office_test_pred`.\n\n#### Exercise 13\n\nBased on your visualization on Exercise 12, speculate on whether you expect the R-squared and RMSE for this model to be higher or lower for predictions on the testing data compared to those on the training data, or do you expect them to be the same? Explain your reasoning.\n\n#### Exercise 14\n\nCheck your intuition in Exercise 13 by actually calculating the R-squared and RMSE for this model for predictions on the training data. Comment on whether your intuition is confirmed or not.\n\n## Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nRemember -- you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n:::\n\nTo submit your assignment:\n\n-   Go to [http://www.gradescope.com](http://www.gradescope.com/) and click *Log in* in the top right corner.\n-   Click *School Credentials* ‚û°Ô∏è *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 210* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n-   Select the first page of your PDF submission to be associated with the *\"Workflow & formatting\"* section.\n\n## Grading\n\nTotal points available: 50 points.\n\n| Component             | Points |\n|-----------------------|--------|\n| Ex 1 - 10             | 45     |\n| Workflow & formatting | 5[^2]  |\n\n[^2]: The \"Workflow & formatting\" grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}